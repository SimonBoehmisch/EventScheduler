@page "/events"
@using EventScheduler.Common.Interfaces;
@using EventScheduler.Common.Models;
@using Radzen

<PageTitle>Events</PageTitle>

<h1>Counter</h1>
@inject DialogService DialogService

<RadzenExample Name="Scheduler" AdditionalSourceCodePages=@(new List<string>() { "AddEventPage.razor", "EditEventPage.razor" })>
    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Event" LoadData="@OnLoadData" Data="@events" StartProperty="Start" EndProperty="End"
                 TextProperty="Title" SelectedIndex="2"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>
</RadzenExample>


@code {

    @inject IEventRepository eventRepository;
    RadzenScheduler<Event> scheduler;

    private List<Event> events;

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End
        events = await eventRepository.GetAsync(null, null);
    }


    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        Event data = await DialogService.OpenAsync<AddEventPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            events.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Event> args)
    {

        //await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await DialogService.OpenSideAsync<DialogSideContent>("Side Panel", options: new SideDialogOptions { CloseDialogOnOverlayClick = true });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Event> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Title == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}