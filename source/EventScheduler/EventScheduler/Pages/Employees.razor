@page "/employees"
@using EventScheduler.Common.Models;
@using EventScheduler.Repositorys;
@using EventScheduler.Common.Interfaces;
<PageTitle>Employees</PageTitle>


<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
    DataGrid InLine Editing
</RadzenText>
<RadzenText TextStyle="TextStyle.Body1" Class="my-4">
    This page demonstrates how to configure the Razden Blazor DataGrid for inline editing.
</RadzenText>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New Order" Click="@InsertRow" Disabled=@(employeeToInsert != null || employeeToUpdate != null) />
<RadzenDataGrid @ref="employeesGrid" EditMode="DataGridEditMode.Single"
                Data="@employees" TItem="Employee" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        @*<RadzenDataGridColumn TItem="Employee" Property="Employee.Id" Title="Customer ID" />*@
        <RadzenDataGridColumn TItem="Employee" Property="Employee.FirstName" Title="Vorname">
            <EditTemplate Context="employee">
                <RadzenTextBox @bind-Value="@employee.FirstName" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Employee" Property="Employee.LastName" Title="Nachname">
            <EditTemplate Context="employee">
                <RadzenTextBox @bind-Value="@employee.LastName" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Employee" Property="Employee.Roles" Title="Roles">
            <EditTemplate Context="employee">
                <RadzenDropDown @bind-Value="@employee.Roles" Data=@roles TextProperty="Name" Multiple=true AllowClear=true Placeholder="Roles">                 </RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Employee" Context="employee" Title="Actions">
            <Template Context="employee">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(employee))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(employee))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="employee">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(employee))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@((args) => CancelEdit(employee))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(employee))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    @inject IEmployeeRepository employeeRepository;
    @inject IRoleRepository roleRepository;
    
    List<Employee> employees;
    List<Role> roles;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        employees = await employeeRepository.GetAsync(null, null, includes: (employee) => employee.Roles);
        roles = await roleRepository.GetAsync(null, null);
    }

    Employee employeeToInsert;
    Employee employeeToUpdate;

    RadzenDataGrid<Employee> employeesGrid;

    private async Task CreateEmployee(Employee employee)
    {
        await employeeRepository.InsertAsync(employee);
        await employeeRepository.SaveChangesAsync();

        employees = await employeeRepository.GetAsync(null, null);
    }

    void Reset()
    {
        employeeToInsert = null;
        employeeToUpdate = null;
    }

    async Task EditRow(Employee employee)
    {
        employeeToUpdate = employee;
        await employeesGrid.EditRow(employee);
    }

    async Task OnUpdateRow(Employee employee)
    {
        if (employee == employeeToInsert)
        {
            employeeToInsert = null;
        }

        employeeToUpdate = null;

        employeeRepository.Update(employee);
        await employeeRepository.SaveChangesAsync();

    }

    async Task SaveRow(Employee employee)
    {
        await employeesGrid.UpdateRow(employee);
    }

    void CancelEdit(Employee employee)
    {
        if (employee == employeeToInsert)
        {
            employeeToInsert = null;
        }

        employeeToUpdate = null;

        employeesGrid.CancelEditRow(employee);

    }

    async Task DeleteRow(Employee employee)
    {
        if (employee == employeeToInsert)
        {
            employeeToInsert = null;
        }

        if (employee == employeeToUpdate)
        {
            employeeToUpdate = null;
        }

        if (employees.Any(r => r.Id == employee.Id))
        {
            employeeRepository.Delete(employee);
            await employeeRepository.SaveChangesAsync();

            employees.Remove(employee);
            await employeesGrid.Reload();
        }
        else
        {
            employeesGrid.CancelEditRow(employee);
            await employeesGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        employeeToInsert = new Employee();
        await employeesGrid.InsertRow(employeeToInsert);
    }

    async Task OnCreateRow(Employee employee)
    {
        await employeeRepository.InsertAsync(employee);
        await employeeRepository.SaveChangesAsync();

        employeeToInsert = null;
    }

}